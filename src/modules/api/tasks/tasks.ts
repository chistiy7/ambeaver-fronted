/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Ambeaver API
 * OpenAPI spec version: 0.0.1
 */
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import * as axios from "axios";
import type { TaskStatus, TasksController200 } from ".././model";

export const tasksController = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TasksController200>> => {
  return axios.default.get(`/tasks`, options);
};

export const getTasksControllerQueryKey = () => {
  return [`/tasks`] as const;
};

export const getTasksControllerInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof tasksController>>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof tasksController>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTasksControllerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tasksController>>> = ({
    signal,
  }) => tasksController({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof tasksController>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TasksControllerInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof tasksController>>
>;
export type TasksControllerInfiniteQueryError = AxiosError<unknown>;

export const useTasksControllerInfinite = <
  TData = InfiniteData<Awaited<ReturnType<typeof tasksController>>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof tasksController>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTasksControllerInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTasksControllerQueryOptions = <
  TData = Awaited<ReturnType<typeof tasksController>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tasksController>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTasksControllerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tasksController>>> = ({
    signal,
  }) => tasksController({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tasksController>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TasksControllerQueryResult = NonNullable<
  Awaited<ReturnType<typeof tasksController>>
>;
export type TasksControllerQueryError = AxiosError<unknown>;

export const useTasksController = <
  TData = Awaited<ReturnType<typeof tasksController>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tasksController>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTasksControllerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const tasksControllerStart = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TaskStatus>> => {
  return axios.default.post(`/tasks/start/${id}`, undefined, options);
};

export const getTasksControllerStartMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerStart>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tasksControllerStart>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tasksControllerStart>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return tasksControllerStart(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TasksControllerStartMutationResult = NonNullable<
  Awaited<ReturnType<typeof tasksControllerStart>>
>;

export type TasksControllerStartMutationError = AxiosError<void>;

export const useTasksControllerStart = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerStart>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof tasksControllerStart>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getTasksControllerStartMutationOptions(options);

  return useMutation(mutationOptions);
};
export const tasksControllerClaim = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(`/tasks/claim/${id}`, undefined, options);
};

export const getTasksControllerClaimMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerClaim>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tasksControllerClaim>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tasksControllerClaim>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return tasksControllerClaim(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TasksControllerClaimMutationResult = NonNullable<
  Awaited<ReturnType<typeof tasksControllerClaim>>
>;

export type TasksControllerClaimMutationError = AxiosError<void>;

export const useTasksControllerClaim = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerClaim>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof tasksControllerClaim>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getTasksControllerClaimMutationOptions(options);

  return useMutation(mutationOptions);
};
