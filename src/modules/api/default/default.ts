/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Ambeaver API
 * OpenAPI spec version: 0.0.1
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import * as axios from "axios";
import type { CreatePlayerDto, Player } from ".././model";

export const appControllerGetHello = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.default.get(`/`, options);
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = AxiosError<unknown>;

export const useAppControllerGetHello = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const playerControllerCreate = (
  createPlayerDto: CreatePlayerDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Player>> => {
  return axios.default.post(`/player`, createPlayerDto, options);
};

export const getPlayerControllerCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playerControllerCreate>>,
    TError,
    { data: CreatePlayerDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof playerControllerCreate>>,
  TError,
  { data: CreatePlayerDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playerControllerCreate>>,
    { data: CreatePlayerDto }
  > = (props) => {
    const { data } = props ?? {};

    return playerControllerCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PlayerControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof playerControllerCreate>>
>;
export type PlayerControllerCreateMutationBody = CreatePlayerDto;
export type PlayerControllerCreateMutationError = AxiosError<unknown>;

export const usePlayerControllerCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playerControllerCreate>>,
    TError,
    { data: CreatePlayerDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof playerControllerCreate>>,
  TError,
  { data: CreatePlayerDto },
  TContext
> => {
  const mutationOptions = getPlayerControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const playerControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Player>> => {
  return axios.default.get(`/player/${id}`, options);
};

export const getPlayerControllerFindOneQueryKey = (id: string) => {
  return [`/player/${id}`] as const;
};

export const getPlayerControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof playerControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof playerControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPlayerControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof playerControllerFindOne>>
  > = ({ signal }) => playerControllerFindOne(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof playerControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PlayerControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof playerControllerFindOne>>
>;
export type PlayerControllerFindOneQueryError = AxiosError<unknown>;

export const usePlayerControllerFindOne = <
  TData = Awaited<ReturnType<typeof playerControllerFindOne>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof playerControllerFindOne>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPlayerControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
