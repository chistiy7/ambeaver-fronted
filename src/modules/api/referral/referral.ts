/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Ambeaver API
 * OpenAPI spec version: 0.0.1
 */
import type {
  InfiniteData,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import * as axios from "axios";
import type {
  ReferralControllerGetReferrals200,
  ReferralControllerGetReferralsParams,
} from ".././model";

export const referralControllerGetReferrals = (
  params: ReferralControllerGetReferralsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReferralControllerGetReferrals200>> => {
  return axios.default.get(`/referral`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getReferralControllerGetReferralsQueryKey = (
  params: ReferralControllerGetReferralsParams
) => {
  return [`/referral`, ...(params ? [params] : [])] as const;
};

export const getReferralControllerGetReferralsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof referralControllerGetReferrals>>
  >,
  TError = AxiosError<unknown>,
>(
  params: ReferralControllerGetReferralsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof referralControllerGetReferrals>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReferralControllerGetReferralsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof referralControllerGetReferrals>>
  > = ({ signal }) =>
    referralControllerGetReferrals(params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof referralControllerGetReferrals>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReferralControllerGetReferralsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof referralControllerGetReferrals>>
>;
export type ReferralControllerGetReferralsInfiniteQueryError =
  AxiosError<unknown>;

export const useReferralControllerGetReferralsInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof referralControllerGetReferrals>>
  >,
  TError = AxiosError<unknown>,
>(
  params: ReferralControllerGetReferralsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof referralControllerGetReferrals>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getReferralControllerGetReferralsInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getReferralControllerGetReferralsQueryOptions = <
  TData = Awaited<ReturnType<typeof referralControllerGetReferrals>>,
  TError = AxiosError<unknown>,
>(
  params: ReferralControllerGetReferralsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof referralControllerGetReferrals>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReferralControllerGetReferralsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof referralControllerGetReferrals>>
  > = ({ signal }) =>
    referralControllerGetReferrals(params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof referralControllerGetReferrals>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReferralControllerGetReferralsQueryResult = NonNullable<
  Awaited<ReturnType<typeof referralControllerGetReferrals>>
>;
export type ReferralControllerGetReferralsQueryError = AxiosError<unknown>;

export const useReferralControllerGetReferrals = <
  TData = Awaited<ReturnType<typeof referralControllerGetReferrals>>,
  TError = AxiosError<unknown>,
>(
  params: ReferralControllerGetReferralsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof referralControllerGetReferrals>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getReferralControllerGetReferralsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
