/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Ambeaver API
 * OpenAPI spec version: 0.0.1
 */
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import * as axios from "axios";
import type { PlayerAssetsDto, RemainingTimeDto } from ".././model";

export const assetsControllerGetPlayerAssets = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PlayerAssetsDto>> => {
  return axios.default.get(`/assets`, options);
};

export const getAssetsControllerGetPlayerAssetsQueryKey = () => {
  return [`/assets`] as const;
};

export const getAssetsControllerGetPlayerAssetsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>
  >,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetPlayerAssetsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>
  > = ({ signal }) =>
    assetsControllerGetPlayerAssets({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsControllerGetPlayerAssetsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>
>;
export type AssetsControllerGetPlayerAssetsInfiniteQueryError =
  AxiosError<unknown>;

export const useAssetsControllerGetPlayerAssetsInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>
  >,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAssetsControllerGetPlayerAssetsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAssetsControllerGetPlayerAssetsQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetPlayerAssetsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>
  > = ({ signal }) =>
    assetsControllerGetPlayerAssets({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsControllerGetPlayerAssetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>
>;
export type AssetsControllerGetPlayerAssetsQueryError = AxiosError<unknown>;

export const useAssetsControllerGetPlayerAssets = <
  TData = Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof assetsControllerGetPlayerAssets>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetsControllerGetPlayerAssetsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const assetsControllerChargePoints = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.post(`/assets/charge-points`, undefined, options);
};

export const getAssetsControllerChargePointsMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsControllerChargePoints>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsControllerChargePoints>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsControllerChargePoints>>,
    void
  > = () => {
    return assetsControllerChargePoints(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AssetsControllerChargePointsMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerChargePoints>>
>;

export type AssetsControllerChargePointsMutationError = AxiosError<void>;

export const useAssetsControllerChargePoints = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsControllerChargePoints>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof assetsControllerChargePoints>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getAssetsControllerChargePointsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const assetsControllerGetTimeToFullEnergy = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RemainingTimeDto>> => {
  return axios.default.get(`/assets/time-to-full-energy`, options);
};

export const getAssetsControllerGetTimeToFullEnergyQueryKey = () => {
  return [`/assets/time-to-full-energy`] as const;
};

export const getAssetsControllerGetTimeToFullEnergyInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>
  >,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetTimeToFullEnergyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>
  > = ({ signal }) =>
    assetsControllerGetTimeToFullEnergy({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsControllerGetTimeToFullEnergyInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>>;
export type AssetsControllerGetTimeToFullEnergyInfiniteQueryError =
  AxiosError<unknown>;

export const useAssetsControllerGetTimeToFullEnergyInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>
  >,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAssetsControllerGetTimeToFullEnergyInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAssetsControllerGetTimeToFullEnergyQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetsControllerGetTimeToFullEnergyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>
  > = ({ signal }) =>
    assetsControllerGetTimeToFullEnergy({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetsControllerGetTimeToFullEnergyQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>
>;
export type AssetsControllerGetTimeToFullEnergyQueryError = AxiosError<unknown>;

export const useAssetsControllerGetTimeToFullEnergy = <
  TData = Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof assetsControllerGetTimeToFullEnergy>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAssetsControllerGetTimeToFullEnergyQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
