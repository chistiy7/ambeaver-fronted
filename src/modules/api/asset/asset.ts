/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Ambeaver API
 * OpenAPI spec version: 0.0.1
 */
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import * as axios from "axios";
import type { PlayerAssetsDto } from ".././model";

export const assetControllerGetPlayerAssets = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PlayerAssetsDto>> => {
  return axios.default.get(`/asset`, options);
};

export const getAssetControllerGetPlayerAssetsQueryKey = () => {
  return [`/asset`] as const;
};

export const getAssetControllerGetPlayerAssetsQueryOptions = <
  TData = Awaited<ReturnType<typeof assetControllerGetPlayerAssets>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof assetControllerGetPlayerAssets>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAssetControllerGetPlayerAssetsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof assetControllerGetPlayerAssets>>
  > = ({ signal }) =>
    assetControllerGetPlayerAssets({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetControllerGetPlayerAssets>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AssetControllerGetPlayerAssetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetControllerGetPlayerAssets>>
>;
export type AssetControllerGetPlayerAssetsQueryError = AxiosError<unknown>;

export const useAssetControllerGetPlayerAssets = <
  TData = Awaited<ReturnType<typeof assetControllerGetPlayerAssets>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof assetControllerGetPlayerAssets>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAssetControllerGetPlayerAssetsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
